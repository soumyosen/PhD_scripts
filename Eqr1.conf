# Combined Minimization, Warm, Eqr

#===========================================================
# USER DEFINE VAR.
#===========================================================

set RunNo  1
set do     3                   ; # 1 Min, 2 Warm, 3 Eqr

structure	temp.psf
coordinates     temp.pdb
fixedAtoms      off
fixedAtomsFile  fix.pdb
fixedAtomsCol   B
constraints off
consref temp.pdb
conskfile fix.pdb
conskcol B
set inp         ../battery.inp
set force       0                   ; # tcl force, 0 off, 1 on
set PME         1                   ; # electrostatic
set periodic    1                   ; # periodic boundary
set ConstP      0                   ; # REMEMBER to set the box

set init_temp   0.01                ; # initial temp.
set final_temp  300                 ; # final temp.
set damping     0.01                ; # damping coeff, ?/ps

set minimize    260                ; # minimization steps
set equilibrate   20000000         ; # equilibration steps

#===========================================================
# INITIAL PARAMETERS
#===========================================================
if { $do < 3 } {
set temperature $init_temp          ; # for Min and Warm
} else {
set temperature $final_temp }       ; # for Eqr only
#-------- From scratch ------------
if { $RunNo < 0 || $do == 2 } {
temperature     $temperature }      ; # randomly initialize velocity
#-------- From *.restart.* --------
if { $RunNo >= 0 || $do == 2 } {
bincoordinates r${RunNo}.restart.coor  ; # coordinate (binary)
extendedSystem r${RunNo}.restart.xsc   ; # cell dimension
if { $do != 2 } { binvelocities  r${RunNo}.restart.vel } ; # velocities (binary)
}
firsttimestep   0                     ; # last step of previous run
# ------- Only Warm ----------------
if { $do == 2 } {
reassignFreq   5
reassignTemp   0
reassignIncr   1
reassignHold   $final_temp }
# ------- Only Eqr -----------------
# ------- Total steps for this run = numsteps - firsttimestep
if { $do == 3 } {
numsteps        $equilibrate }
#===========================================================
# OUTPUT
#===========================================================
incr RunNo 1
outputname    r${RunNo}
binaryoutput  yes
binaryRestart yes

restartfreq         250 ; # CG 1000   ; # 500steps = every 1ps
dcdfreq             250
xstFreq             250
outputPressure      250
outputEnergies      250 ; # CG 500
#outputTiming       1000               ; # show time per step and to completion
#===========================================================
# CHARMM FORCE FIELD RELATED
#===========================================================
paratypecharmm  on
parameters	$inp
#cosAngles       yes ; # CG only

#specified by CHARMM
exclude	        scaled1-4
#exclude         1-3 ; # CG only
1-4scaling	0.2  ; # only on when exclude is scaled1-4
switching 	on

cutoff		10.0 ; # CG 14        ; # 12.0, with PME maybe 10.0
switchdist	8.0  ; # CG 12        ; # cutoff -2
# promise that atom won't move more than 2A ina  cycle
pairlistdist 	12.0 ; # CG 16        ; # cutoff +2, see warning > increase
stepspercycle   20                    ; # redo pairlists every ? steps
margin		1.0  ; # CG run only
#hgroupcutoff    0   ; # CG only

#####################################
#eFieldOn        no
#eField          0.000 1.000 0.000

#dielectric      20 ; # CG only
#####################################

# Integrator Parameter
timestep	   2.0; # CG 20 ; # limited to 1fs/step, can extend to 2	
rigidbonds         all; # CG off ; # needed for timestep of 2fs
nonbondedFreq      1    ; # nonbonded forces every step
fullElectFrequency 2  ; # CG off ; # PME every other step

#===========================================================
# PERIODIC BOUNDARY | ELECTROSTATIC
#===========================================================

#-------- Periodic Boundary Conditions ------------
if { $periodic == 1 } {
cellBasisVector1    60.    0.    0.
cellBasisVector2     0.   60.    0.
cellBasisVector3     0.    0.   60.    
cellOrigin           0.    0.   0. }
#The cell origin is the one coordinate that does not change 
#during constant pressure simulation. This point plays a role 
#in calculating the pressure contribution due to fixed atoms, 
#harmonic restraints, and other ``external'' forces. To minimize 
#pressure fluctuations, this point should be close to the center 
#of the macromolecule of interest.
#The origin also defines the center of the periodic cell to 
#which coordinates will be wrapped on output if the following 
#options below are used. With wrapping, some molecules will 
#jump between sides of the cell in the trajectory file to 
#yield the periodic image nearest to the origin. Without 
#wrapping, molecules will have smooth trajectories, but water 
#in the trajectory may appear to explode as individual molecules 
#diffuse. Wrapping only affects output, not the correctness of 
#the simulation.
wrapWater          on ; # wrap water to the center cell
wrapAll            on ; # wrap other molecules too
wrapNearest        off ; # use for non-rectangular cells
#COMmotion           no ; # CG run only
#Particle mesh Ewald (PME) full electrostatics are more accurate 
#and less expensive than larger cutoffs, and are recommended for 
#most work. PME is only applicable to periodic simulations, and 
#the user must specify a grid corresponding to the size of the 
#periodic cell. PME grid dimensions should have small integer 
#factors only and be greater than or equal to length of the 
#basis vector.
#-------- PME (for full-system periodic electrostatics) ---
if { $PME == 1 } {
PME                yes    ; # how many grid (around 1A)
PMEGridSpacing     1.0    ; #A
#PMEGridSizeX       108    ; # use 2^?*3^?*5^?
#PMEGridSizeY       108    ; # for fast fourier transform
#PMEGridSizeZ       108 
}

#===========================================================
# CONSTANT TEMPERATURE | CONSTANT PRESSURE
#===========================================================

#-------- Constant Temperature Control ---------------------
langevin	 on           ; # langevin dynamics
langevinDamping  $damping     ; # damping coeff. of ?/ps
langevinTemp     $temperature ; # random noise at this level
langevinHydrogen yes          ; # couple bath to hydrogens?

#-------- Constant Pressure Control (variable volume) -------
#Constant pressure is recommended for periodic simulations. 
#Using group-based pressure to control the periodic cell 
#fluctuations is desirable because the atom-based pressure 
#has more high-frequency noise. useFlexibleCell is useful for 
#anisotropic systems such as membranes, allowing the height, 
#length, and width of the cell to vary independently, possibly 
#even fixing the lipid cross-sectional (x-y plane) area with 
#useConstantArea. For a protein surrounded by water there is 
#nothing to prevent the cell from becoming highly extended in 
#one dimension, so it is better to choose useFlexibleCell no 
#in this case.
if { $ConstP == 1 && $do != 2 } {
useGroupPressure      yes ; # needed for rigid bonds
useFlexibleCell       no ; # no for water box, yes for membrane
useConstantArea       no  ; # no for water box, maybe for membrane
#The actual parameters of the NosÃ©-Hoover Langevin piston method 
#control the target pressure and the dynamical properties of the 
#barostat. A ``piston'' with a longer period (i.e., larger mass) 
#will better damp out fluctuations in the instantaneous pressure. 
#Langevin dynamics is applied to the piston itself coupling it to 
#a heat bath with a damping constant of langevinPistonDecay. We 
#set langevinPistonDecay smaller that langevinPistonPeriod to 
#ensure that harmonic oscillations in the periodic cell are overdamped.
langevinPiston        on 
langevinPistonTarget  1.01325      ; # pressure in bar -> 1 atm
langevinPistonPeriod  200.         ; # oscillation period around ? fs
langevinPistonDecay   100.         ; # oscillation decay time of ? fs
langevinPistonTemp    $temperature ; # coupled to heat bath
#SurfaceTensionTarget  100.0         ; # dyn/cm
}

#===========================================================
# STEERING FORCES
#===========================================================

#The interactive MD features of NAMD and VMD allow you to connect to a 
#running simulation to apply steering forces manually. These options 
#affect performance, and should therefore not be used unless you are 
#actually steering the simulation.
#IMDon           on
#IMDport         2030    ; # port number (enter it in VMD)
#IMDfreq         1       ; # send every 1 frame
#IMDwait         off     ; # wait for VMD to connect before running?

#===========================================================
# EXECUTION SCRIPT
#===========================================================

#Now we minimize the system to eliminate bad initial contacts, 
#reinitialize the velocities to the desired target temperature 
#(since minimization sets velocities to zero), and run for 100ps. 
#We could accomplish the same thing with two different NAMD runs 
#using the numsteps and minimization options. Scripting commands 
#such as those below override numsteps.
if { $do == 1 } {
minimize            $minimize      ; # lower potential energy for ? steps
reinitvels          $final_temp } ; # since minimization zeros velocities
if { $do == 2 } { 
run 1560 } ; # 100ps


#===========================================================
# TCL FORCES
#===========================================================

if { $force == 1 && $do == 3 } {
tclForces               on
tclForcesScript {
source select.tcl
#source sphere.tcl
source force.tcl
}; }


#colvars              on
#incr RunNo -1
#colvarsInput         r${RunNo}.colvars.state
#colvarsInput         r${RunNo}.restart.colvars.state
#colvarsConfig        c.in
